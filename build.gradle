import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.2.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id "com.diffplug.spotless" version "5.0.0"
}

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name

subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

apply from: "$rootDir/dependencies.gradle"
apply from: "$rootDir/springboot-bom-overrides.gradle"
apply from: "$rootDir/deploy.gradle"

allprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'project-report'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
    
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    group = 'org.conductoross'

    configurations.all {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            // dependency versions for the BOM can be found at https://docs.spring.io/spring-boot/docs/3.1.4/reference/htmlsingle/#appendix.dependency-versions
            mavenBom(SpringBootPlugin.BOM_COORDINATES)
        }
    }

    dependencies {
        implementation('org.apache.logging.log4j:log4j-core')
        implementation('org.apache.logging.log4j:log4j-api')
        implementation('org.apache.logging.log4j:log4j-slf4j-impl')
        implementation('org.apache.logging.log4j:log4j-jul')
        implementation('org.apache.logging.log4j:log4j-web') 
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('org.springframework.boot:spring-boot-starter-log4j2')
        testImplementation 'junit:junit'
        testImplementation "org.junit.vintage:junit-vintage-engine"
    }

    // processes additional configuration metadata json file as described here
    // https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-configuration-metadata.html#configuration-metadata-additional-metadata
    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
        testLogging {
            events = ["SKIPPED", "FAILED"]
            exceptionFormat = "full"
            displayGranularity = 1
            showStandardStreams = false
        }
    }
}

// all client and their related modules are published with Java 17 compatibility
["annotations", "common", "client", "client-spring", "grpc", "grpc-client"].each {
    project(":conductor-$it") {
        compileJava {
            options.release = 17
        }
    }
}

task server {
    dependsOn ':conductor-server:bootRun'
}

configure(allprojects - project(':conductor-grpc')) {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat().aosp()
            removeUnusedImports()
            importOrder('java', 'javax', 'org', 'com.netflix', '', '\\#com.netflix', '\\#')
            licenseHeaderFile("$rootDir/licenseheader.txt")
        }
    }
}

['cassandra-persistence', 'core', 'redis-concurrency-limit', 'test-harness', 'client'].each {
    configure(project(":conductor-$it")) {
        spotless {
            groovy {
                importOrder('java', 'javax', 'org', 'com.netflix', '', '\\#com.netflix', '\\#')
                licenseHeaderFile("$rootDir/licenseheader.txt")
            }
        }
    }
}